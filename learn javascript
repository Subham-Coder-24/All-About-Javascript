// const name ="raja"
// const age =12
// const greet =`this is ${name} and age is ${age}`
// console.log(greet)

// const name =""
// const username = name || "user"
// console.log(username)

//how to creat person is object
// const person ={
//     key:"raja",
//     age:20,
//     roll:50,
//     details:{
//         status: `coder`
//     }
// }


//  console.log(` my age is ${person.age}`)
//  console.log(` my roll number is ${person.roll}`)
//  console.log(` i am a ${person.details.status}`)

// //we poll out age and roll from object called object destructuring

// //const{age , roll} = person
// //const{status} = person.details
// //we rename age to myage
//  const{age:myage , roll , details:{status}} = person

//  console.log(` my age is ${myage}`)
//  console.log(` my roll number is ${roll}`)
//  console.log(` i am a ${status}`)

//////////////////////////////////////////////////////////////////////////////////////////

// const na = "raj"
// const age = 12
// //this is object
// // const person ={
// //     na:na,
// //     age:age
// // }

// //this is also a object here key and value are same
// const person ={ na , age }

// console.log(person.na , person.age)
// console.log( na , age )
// console.log(person)

//////////////////////////////////////////////////////////////////////////////////////////


// how to make function in javascript


// const sum = function(){
//     const x = 3
//     const y = 4
//     console.log(x+y)
// }
// sum()

// function using arrow operator
// const greet = (name)=>{
//     console.log(`Hello ${name}`)
// }
// greet("raj")

// const greet = (name , age )=>{
//    return `Hello ${name} age = ${age}`
// }
// console.log(greet("raj" , 20))


// const greet = (name , age )=> `Hello ${name} age = ${age}`
// console.log(greet("raj" , 20))

//passing a object through a function
// const greet = (person)=>{
//     const{name , age} = person //object destruction
//    return `Hello my name is ${name} age = ${age}`
// }
// console.log(greet( {name:"raja", age:12} ))

// const greet = ({name,age})=>{
//    return {result:`Hello my name is ${name} age = ${age}`}
// }
// console.log(greet( {name:"raja", age:12} ).result)

// const greet = ({name,age})=>( {result:`Hello my name is ${name} age = ${age}`})
// console.log(greet( {name:"raja", age:12} ).result)

//////////////////////////////////////////////////////////////////////////////////////////////////

//primitive vs referance and spread()
//object is non-primitive and referance type
// const obj1 = {
//     name: "suresh",
//     status:"coder"
// }
// const{name , status} = obj1 // destruction
// const obj2 = obj1
// obj1.name = "ramesh"
// console.log(obj2)

// const obj1 = {
//     name: "suresh",
//     status:"coder"
// }

// //copy the object

// //..obj1

// //name: "suresh",
// //status:"coder"

// const obj2 ={
//     ...obj1,
//     item:5
// }
// obj1.name = "ramesh"
// console.log(obj2)


///////////////////////////////////////////////////////////////////////////////////////
//array , map and filter
// const arr = [10,20,30]
// console.log(arr)
// console.table(arr)
// console.log(arr[2])

// const arr1 = [10,20,30]
// const arr2 = [50,60,70]
// const arr3 = [...arr1 , ...arr2]
// //...arr1 it is for only coping
// console.log(arr3)
// console.table(arr3)

//array destruction 
// const number1 = [10,20,30,40]
// const [a,b,c,d] = number1
// console.log(a,b,c,d) 

//printing function
// const fruits = ['mango','apple','banana']
// fruits.forEach((fruit)=>{
//     console.log(fruit)
// })

//how to increment salary
// const emp = [
//     {name:'ramesh',salary:1000},
//     {name:'suresh',salary:2000},
//     {name:'hitesh',salary:3000},
// ]

// const emp2 = []
// emp.forEach((item)=>{
//     item.salary+=2000
//     emp2.push(item)
// })

//we use map which return whole array
// const emp2 = emp.map((item)=>{
//     item.salary+=2000
//     return (item)
// })
// console.log(emp2)

//how to use filter() function in array
// const toodos = [
//     {id:1,todo:"eat"},
//     {id:2,todo:"sleep"},
//     {id:3,todo:"code"}
// ]
// const newTodo = toodos.filter((item)=>{
//     return item.id!=3
// })
// console.log(newTodo)
 
// const toodos = [
//     {id:1,todo:"eat"},
//     {id:2,todo:"sleep"},
//     {id:3,todo:"code"}
// ]
// const removeTodos = (id)=>{ 

// const newTodo = toodos.filter((item)=>{
//     return item.id!=id
// })
//   console.log(newTodo)
// }
// removeTodos(2)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//fatch ,promises ans async await
// fatch('url') // it return promise

// .then((res)=>{
//     return res.json()
// })
// .then((result)=>{
//     console.log(result)
// })
// .catch((err)=>{
//     console.log(err)
// })


// async function fetchpost(){

// const res = await fatch('url') // it return promise
// const result = await res.json()
// console.log(result)

// }

// const fetchpost= async()=>{
// try{
// const res = await fatch('url') // it return promise
// const result = await res.json()
// console.log(result)
// }catch(err){
//     console.log(err)
// }
// }
//////////////////////////////////////////////////////////////////////////////////////////////////
//console.log("%ci am a coder and %cproblem solver",'color:orange','background:green')

// function print(text){
//     console.log(`%c ${text}`,'color:green;font-size:20px')
// }
//print("i am a coder")
//object
// const bullet ={
//     color:"red",
//     maxspeed:110,
//     itro:()=>{
//         print(`bullet bike is ${this.color} and max speed ${maxspeed} kmph`)
//     }
// }

// console.log(bullet.color)
//creating class
// class car{
//     constructor(color,speed){
//         this.color = color
//         this.maxspeed = speed
//     }
//     intro(){
//         console.log( `car colour is ${this.color} and max speed is ${this.maxspeed}`)
//     }
// }
//class inheritance
// class laptop extends car{
//     constructor(color,speed,fan){
//         super(color,speed)//call the parent constructor
//         this.fan=fan
//     }

// }

//creating object
// const car1 = new car("red",120)
// const car2 = new car("black",160)
// car1.intro()
// car2.intro()

// const laptop1 = new laptop("red" , 30 ,true)
// console.log(laptop1.fan)
// laptop1.intro()
